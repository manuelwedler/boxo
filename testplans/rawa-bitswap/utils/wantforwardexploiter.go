package utils

import (
	"context"
	"sync"

	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p/core/peer"
	bsmsg "github.com/manuelwedler/boxo/bitswap/message"
	bitswap_message_pb "github.com/manuelwedler/boxo/bitswap/message/pb"
	bsnet "github.com/manuelwedler/boxo/bitswap/network"
)

type WantForwardExploiter struct {
	lk                sync.RWMutex
	self              peer.AddrInfo
	network           bsnet.BitSwapNetwork
	ObservedCids      map[cid.Cid]struct{}
	WantBlockFromPeer map[peer.ID]cid.Cid
	// Makes sure to only send a forward-have once for each request
	AnsweredRequests map[peer.ID]map[cid.Cid]struct{}
}

func NewWantForwardExploiter(self peer.AddrInfo, network bsnet.BitSwapNetwork) *WantForwardExploiter {
	exploiter := &WantForwardExploiter{
		self:              self,
		network:           network,
		ObservedCids:      make(map[cid.Cid]struct{}),
		WantBlockFromPeer: make(map[peer.ID]cid.Cid),
		AnsweredRequests:  make(map[peer.ID]map[cid.Cid]struct{}),
	}

	return exploiter
}

func (wfe *WantForwardExploiter) ReceiveMessage(_ context.Context, sender peer.ID, incoming bsmsg.BitSwapMessage) {
	wfe.lk.Lock()
	defer wfe.lk.Unlock()

	for _, e := range incoming.Wantlist() {
		wfe.ObservedCids[e.Cid] = struct{}{}

		if e.WantType == bitswap_message_pb.Message_Wantlist_Block {
			wfe.observedWantBlock(sender, e.Cid)
		}
	}
	for _, e := range incoming.Forwardlist() {
		wfe.ObservedCids[e.Cid] = struct{}{}
		wfe.sendResponse(sender, e.Cid)
	}
}

func (wfe *WantForwardExploiter) observedWantBlock(sender peer.ID, c cid.Cid) {
	if _, ok := wfe.WantBlockFromPeer[sender]; !ok {
		wfe.WantBlockFromPeer[sender] = c
	}
}

func (wfe *WantForwardExploiter) sendResponse(to peer.ID, c cid.Cid) {
	if _, ok := wfe.AnsweredRequests[to]; !ok {
		wfe.AnsweredRequests[to] = make(map[cid.Cid]struct{})
	}
	if _, ok := wfe.AnsweredRequests[to][c]; ok {
		return
	}
	wfe.AnsweredRequests[to][c] = struct{}{}

	go func(p peer.ID, k cid.Cid) {
		message := bsmsg.New(false)
		message.AddForwardHave(k, []peer.AddrInfo{wfe.self})
		wfe.network.SendMessage(context.Background(), p, message)
	}(to, c)
}

func (wfe *WantForwardExploiter) ReceiveError(error) {}

func (wfe *WantForwardExploiter) PeerConnected(peer.ID) {}

func (wfe *WantForwardExploiter) PeerDisconnected(peer.ID) {}

// ensure WantForwardExploiter satisfies interface
var _ bsnet.Receiver = &WantForwardExploiter{}
